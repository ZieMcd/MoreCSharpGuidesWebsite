@page "/NameBasedAuthorizeView"
<MudPaper Style="background: #f0f8ff; padding-top: 20px">
    <MudText Typo="Typo.h4" Align="Align.Center">Blazor Authentication & Authorization with Okta and NameBasedAuthorizeViewComponent</MudText>
    <hr style="width:75%; margin: auto; ">

    <MudText Typo="Typo.body1" Style="margin: 30px">
        Dotnet Blazor applications are unlike other dotnet web applications mainly because it is component based which prezents
        a interesting way to handle Authorization. In a traditional a mvc application you could create you own implementation of
        Microsoft's
        <MudLink href="https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.authorizeattribute?view=aspnet-mvc-5.2" Target="_blank">
            Authorize Attribute
        </MudLink> or use
        <MudLink Href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/roles?view=aspnetcore-6.0" Target="_blank">
            Role-based authorization
        </MudLink>.
        Although you can use
        <MudLink Href="https://docs.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-6.0#authorize-attribute" Target="_blank">
            Authorize Attribute on a blazor
        </MudLink>
        page I do dont think this utilizes Blazor's component based nature very well and I think the best solution is to use blazors
        <MudLink Href="https://docs.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-6.0#authorizeview-component" Target="_blank">
            AuthorizeView component
        </MudLink>.
        <br>
        <MudText Style="margin-top: 10px" Typo="Typo.h4">AuthorizeView component</MudText>
        <hr style="width: 60%">
        <br>
        The AuthorizeView component is great. It allows for so much conttoller over what users can and can not see. I will give a small example to demonstrate.
        <CodeBlock CodeAsString=@AuthorizedView></CodeBlock>
        In the code above if the user is Authorized he will see what ever is between &lt;Authorized&gt; tags, if the user is not Authorized he will see what ever is
        between the &lt;NotAuthorized&gt;. <br>
        This already gives so much power over what the user will see if he not Authorized, every Component you have can have its own view if the user is not authorized.
        You can extend this power by using role-based authorization with the Roles parameter:
        <CodeBlock CodeAsString=@AuthorizedViewRoles></CodeBlock>
        This feature is amazing, you can have multiple of theese components on single page wiht different roles. That means two differnet users can see complete differents
        versions of the same page. For example you can have a dashboard page with three components that have the admin role and two more components that have the common role.
        This means if your a user with both admin and common role you can see all the compontes on the page, if the user only has the common role he will only be able to see
        the two components.
        <MudText Style="margin-top: 10px" Typo="Typo.h6">The problem with role-based AuthorizeView component</MudText>
        I'm going to lay out a senerio, you have built and deployed your blazor application and it has many role-based AuthorizeViews but now you or company decided that
        a component or multiple components can viewed by more or less roles. Now you need scan through your code and find all the components that need roles added or removed.
        Not only do you have do that now you need to redeploy your code. <br/>
        It because of this problem I created the <b>NameBasedAuthorizedComponent</b>. NameBasedAuthorizeComponent is very simial to Microsoft's AuthorizeView but you dont pass
        in roles as a parameter but rather a ComponentName you will then implement an interface that uses the ComponentName to retrive the roles for that component. The great
        thing about this is that you decide how you get roles for a component e.i. Api calls, connecting to a DB or even hardcode it.
        <MudText Style="margin-top: 10px" Typo="Typo.h4">Getting Started</MudText>
        <hr style="width: 60%">
        Now that I have given you some background infomation on Authetication in blazor and why I create the NameBasedAuthorizedComponent I am going to give you a full guide
        on how to get how to Authetication working in blazor from scratch and with using the NameBasedAuthorizedComponent.
        <MudText Style="margin-top: 10px" Typo="Typo.h6">Picking an Idendtity Provider</MudText>
        <hr style="width: 40%">
        The first thing we need to is pick a Idendtity Provider. If you don't what a Idendtity Provider is I recomend doing some research but for now I will give a you a breif
        explanation. It is what your site use to determine who a user is, It can send info like there username, age, email ect. In our case we want an I a Idendtity Provider that
        will provide roles for a user or something similar. The Idendtity Provider I have choosen for this guid is <MudLink href="https://www.okta.com/" Target="_blank">Okta</MudLink> , I like Okta
        because it's pretty easy to set up and has a nice GUI
        <MudText Style="margin-top: 10px" Typo="Typo.h6">Setting up okta</MudText>
        The first thing you need to do is create a okta account at <MudLink href="https://developer.okta.com/signup/" Target="_blank">https://developer.okta.com/signup/</MudLink>.
        <MudText>
            <img src="Images/OktaSignUp.PNG" alt="Okta signup form">
        </MudText>
        After you have signed in you should have a dashboard take looks like the below
        <MudText>
            <img src="Images/OktaMainDashboard.png" alt="Okta dashboard">
        </MudText>
        From here head to Applications -> Applications and click Create App Intergration.
        <MudText>
            <img src="Images/OktaCreateAppIntergration.png" alt="Okta App Integration Button">
        </MudText>
        Now we need to select our sign method which should be OIDC and our Application Type which is Web Application
        <MudText>
            <img src="Images/OktaCreateAppIntergrationMethodAndType.png" alt="Okta Create App Integration select method and type form">
        </MudText>
        Now that we have selected our sign method and our Application Type, we can set all the settings for our Okta application. For now most of setting are not important and
        we will circle back to them later. In the mean time name the application (I named it SampleApp), under Client acting on behalf of a user tick <i>"Implicit (hybrid)"</i> and
        under Controlled access select <i>"Skip group assignment for now"</i>
        <MudText>
            <img src="Images/OktaCreateAppIntergrationFullForm.png" alt="Okta Create App Integration all settings">
        </MudText>
        After you click save you should done. Your Okta app is set up! You will some more setting like Client Credentials we will come back to that but first we must create are Blazor
        project.
        <MudText Style="margin-top: 10px" Typo="Typo.h6">Creating our Blazor Project</MudText>
        <hr style="width: 40%">
        For this guide I will be using a blazor server side project with .Net 6. The NameBasedAuthorizeViewComponent will work exactly same as on a webassembly project but the setting up of
        Authentication will be slightly different. You are using a webassembly project I recomending reading
        <MudLink Href="https://developer.okta.com/blog/2020/09/30/blazor-webassembly-wasm-dotnetcore" Target="_blank">
            this
        </MudLink> guide. <br>
        @* Also anothere thing to note is that I am uising Rider as my ide. <br> *@
        <br>
        Alright so the first you need to do create your project , go to the folder where want to creat the project and open a terminal and type the following command.
        <CodeBlock CodeAsString="@Command"></CodeBlock>
        replace {The name of your App} with what ever you want name app in my case I called it AuthDemoApp. <br>
        Now that we have created the project must install he okta nuget, it makes setting up and using okta much easier. To install the nuget use this command
        <CodeBlock CodeAsString="dotnet add package Okta.AspNetCore"></CodeBlock>
        I know there are many ways of adding nugets and creating projects, for demo purposes I am using the dotnet cli but feel free to use any method youl like. <br>
        <MudText Style="margin-top: 10px" Typo="Typo.h6">Configuring Okta in our App</MudText>
        To configure Okta we need some configuration infomation from the Okta app we create earlier. Go back to the Okta portal and go to Applications -> Applications and you should
        see the application you made earlier, click on it.
        <MudText> <img src="Images/OktaFindYourApp.png" alt="Where to find your okta app"> </MudText>
        From your okta app you need we need Client ID, Client secret and Okta domain. We going to put this in the appsettings.josn so we can use this in are project as config.
        <MudText><img src="Images/OktaWhatSettingsYouNeed.png" alt="What settings you need to copy from okta app"></MudText>
        And this what your app settings should look like.
        <CodeBlock CodeAsString="@AppSetting"></CodeBlock>
        Now we can configure authentication using Okta in Program.cs, under var builder = WebApplication.CreateBuilder(args); add
        <CodeBlock CodeAsString="@AddAuth"></CodeBlock>
        and then inbetween app.UseRouting(); and app.MapBlazorHub(); add 
        <CodeBlock CodeAsString="@UseAuth"></CodeBlock>
        Cover the content in App.razor with  &lt;CascadingAuthenticationState&gt;
        <CodeBlock CodeAsString="@AppRazor"></CodeBlock>
        You also need to add NameBasedAuthorizeViewComponent.Components to _Imports.cs
        <CodeBlock CodeAsString="@Import"></CodeBlock>
        And with that Okta authentication is set up and we can begin to use it
        <MudText Style="margin-top: 10px" Typo="Typo.h6">Created user sign in</MudText>
        We are going to make a going to make Controller that will be used to log users in and out. Create a folder called Controllers in that folder create a class
        called AccountController. The AccountController should look the like below 
        <CodeBlock CodeAsString="@AccountController"></CodeBlock>
        Also add app.MapControllers(); to program.cs between app.UseAuthorization(); and app.MapBlazorHub(); like so 
        <CodeBlock CodeAsString="@AddMvc"></CodeBlock>
        Before we use this controller we need to change some settings in your Okta app so go to your okta app like we did earlier and edit the General Settings. You should
        see Sign-in redirect URIs and Sign-out redirect URIs under the heading LOGIN. Sign-in redirect URIs must be eqaul to 
        <i>{Your projects base url}/authorization-code/callback</i>,  Sign-out redirect URIs must be eqaul to <i>{Your projects base url}/Account/PostLogout</i>. you can 
        find your projects base url in Properties/launchSetting.json be sure to the https one. 
        <MudText><img src="Images/OktaChangingUrlsInOkta.png" alt="Where to change okta redirect urls"></MudText>
        Before we login with okta in our project we to create and assign user to okta app <br>
        In the okta dashboard go to Directory->People. There should already one person there if not create one by clicking Add person. Once you have a person click on them.
        <MudText><img src="Images/OktaPeople.png" alt="Where find people in okta"></MudText>
        Once a person is selected click Assign Applications and assign the application we create earlier.
        <MudText><img src="Images/OktaSelectedPerson.png" alt="Select a person in okta">  <img src="Images/OktaAssignPerson.png" alt="Assign app to person in okta"></MudText>
        We are going to make a little display in the nav bar that redirects to our account controller. <br>
        Create a new blazor component called LoginDisplay.razor and put it in the shared folder. The code for component should look like the below
        <CodeBlock CodeAsString="@LogingDisplay"></CodeBlock>
        If the user is signed in they will see there name and link to sign out if they are not signed in then they will see a link to sign in. <br>
        Add &lt;LoginDisplay /&gt; to the MainLayout.razor 
        <CodeBlock CodeAsString="@MainLayout"></CodeBlock>
        Users can now sign in, we can confirm this by starting up the application and testing it. <br>
        The project so start without any errors and in the top right you should see a link saying sign in.
        <MudText> <img src="Images/ProjectHomepage.png" alt="Our project home page"></MudText>
        After clicking sign In you should be redirect to okta login
        <MudText><img src="Images/ProjectOktaLogIN.png" alt="okta log page"></MudText>
        After signing in you shoul now see the name of the user that signed in the top left. <br>
        This means that Authentication is full set up and if you wanted you could you Microsoft's Default Authorize view
        <MudText Style="margin-top: 10px" Typo="Typo.h4">Using NameBasedAuthorizeViewComponent</MudText>
        <hr style="width: 60%">
        Now that we got Authentication set we can start to use NameBasedAuthorizeViewComponent but this does recuire a bit more set up, We need get Okta to send us a logged in users
        roles and we need to Impenment INameBasedAuthorizationHelper which used to get the roles associated to a component. 
        <MudText Style="margin-top: 10px" Typo="Typo.h6">Getting Okta to send us a users Roles</MudText>
        <hr style="width: 40%">
        Okta does not have roles but it does have something very similiar groups, we can then get okta to send us the groups a user belongs to as roles. <br>
    </MudText>
</MudPaper>

@code {

    string AuthorizedView =
        @"<AuthorizeView>
    <Authorized>
        <h1>Hello</h1>
        <p>You can only see this content if you're authorized.</p>
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>";

    string AuthorizedViewRoles =
        @"<AuthorizeView Roles= ""admin"">
    <Authorized>
        <h1>Hello</h1>
        <p>You can only see this content if you have the admin role.</p>
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You are not admin.</p>
    </NotAuthorized>
</AuthorizeView>";

    string Command = @"dotnet new blazorserver -n ""{The name of your App}"" ";
    
    string AppSetting = 
        @"{
  ""Logging"": {
    ""LogLevel"": {
      ""Default"": ""Information"",
      ""Microsoft.AspNetCore"": ""Warning""
    }
  },
  ""AllowedHosts"": ""*"",
  ""Okta"": {
    ""Domain"": ""https://{yourOktaDomain}"",
    ""ClientId"": ""{yourClientId}}"",
    ""ClientSecret"": ""{yourClientSecret}""
  }
}";
    
    string AddAuth = 
        @"builder.Services.AddAuthentication(options =>
    {
        options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
        options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;
    })
    .AddCookie()
    .AddOktaMvc(new OktaMvcOptions
    {
        OktaDomain = builder.Configuration[""Okta:Domain""],
        ClientId = builder.Configuration[""Okta:ClientId""],
        ClientSecret = builder.Configuration[""Okta:ClientSecret""],
        Scope = new List<string> {""openid"", ""profile"", ""email""},
    });

";

    string UseAuth = "app.UseRouting();\n \napp.UseAuthentication(); \napp.UseAuthorization();\n \napp.MapBlazorHub();";
    
    string AppRazor = @"
 <CascadingAuthenticationState>  
   <Router AppAssembly=""@typeof(App).Assembly"">
        <Found Context=""routeData"">
             <RouteView RouteData=""@routeData"" DefaultLayout=""@typeof(MainLayout)""/>
             <FocusOnNavigate RouteData=""@routeData"" Selector=""h1""/>
        </Found>
        <NotFound>
             <PageTitle>Not found</PageTitle>
             <LayoutView Layout=""@typeof(MainLayout)"">
             <p role=""alert"">Sorry, there's nothing at this address.</p>
             </LayoutView>
        </NotFound>
   </Router>
</CascadingAuthenticationState>  
";

    string Import = @"@using NameBasedAuthorizeViewComponent.Components";
    
    string LogingDisplay = 
        @"<AuthorizeView>
    <Authorized>
        <a href=""#"">Hello, @context.User.Identity.Name!</a>
        <a href=""Account/SignOut"">Sign out</a>
    </Authorized>
    <NotAuthorized>
        <a href=""Account/SignIn"">Sign in</a>
    </NotAuthorized>
</AuthorizeView>
";

    string AccountController = 
        @"[Route(""[controller]/[action]"")]
public class AccountController : Controller
{
    public IActionResult SignIn([FromQuery] string returnUrl)
    {
        if (User.Identity.IsAuthenticated)
        {
            return LocalRedirect(returnUrl ?? Url.Content(""~/""));
        }

        return Challenge(OktaDefaults.MvcAuthenticationScheme); 
    }

    public  async Task<IActionResult> SignOut([FromQuery]string returnUrl)
    {
        if (!User.Identity.IsAuthenticated)
        {
            return LocalRedirect(returnUrl ?? Url.Content(""~/""));
        }

        await HttpContext.SignOutAsync();

        return LocalRedirect(returnUrl ?? Url.Content(""~/""));
    }
    
    [HttpPost(""Logout"")]
    [ValidateAntiForgeryToken]
    public IActionResult PostLogout([FromQuery]string returnUrl)
    {
        returnUrl ??= Url.Content(""~/"");
        returnUrl = Url.IsLocalUrl(returnUrl) ? returnUrl : Url.Content(""~/"");

        if (User.Identity.IsAuthenticated)
        {
            HttpContext.SignOutAsync();
        }

        return LocalRedirect(returnUrl);
    }
}
";
    string AddMvc = "app.UseAuthorization();\n \napp.MapControllers();\n \napp.MapBlazorHub();";
    
    string MainLayout = 
        @"@inherits LayoutComponentBase

<PageTitle>NameBasedAuthorizedComponentExampleApp</PageTitle>

<div class=""page"">
    <div class=""sidebar"">
        <NavMenu/>
    </div>

    <main>
        <div class=""top-row px-4"">
            <LoginDisplay />           <-------------------------------------------------
            <a href=""https://docs.microsoft.com/aspnet/"" target=""_blank"">About</a>
        </div>

        <article class=""content px-4"">
            @Body
        </article>
    </main>
</div>
";
    
}