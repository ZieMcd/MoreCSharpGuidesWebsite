@page "/KubernetesCronJobs"
<PageTitle>More C# Guides: KubernetesCronJobs</PageTitle>
<MudPaper Style="background: #f0f8ff; padding-top: 20px">
    <MudText Typo="Typo.h4" Align="Align.Center"> Using Kubernetes Cron Jobs and Dotnet worker services to scheduled
        background tasks</MudText>
    <hr style="width:75%; margin: auto; ">
    <MudText Typo="Typo.body1" Style="margin: 30px">
        There are times as a developer that you want to run code periodically. There a are few ways to do this in C#.
        There are two
        popular libraries, <MudLink Href="https://www.quartz-scheduler.net/" Target="_blank">Quartz</MudLink> and
        <MudLink Href="https://www.hangfire.io/" Target="_blank">Hangfire</MudLink> that allow you to schedule jobs.
        Both of these
        libraries suffer from the same problem. Say if you have two jobs (the code you want to run periodically) each in
        their own library.
        Either your Hangfire or Quartz project has to reference both of those libraries. So if you want to add or edit a
        job you have to take
        your whole scheduler project down which means no jobs run while you are doing a deployment. In summary, all your
        jobs are coupled to
        the scheduler project that uses either Hangfire or Quartz. <br>
        So that is why I think the best way to schedule the running of code is with <MudLink
            Href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/" Target="_blank">
            KubernetesCronJobs</MudLink>. KubernetesCronJobs will start a docker container on a repeating schedule. I
        like to start <MudLink Href="https://docs.microsoft.com/en-us/dotnet/core/extensions/workers" Target="_blank">
            worker service</MudLink> containers
        because worker services have quite a lot of built-in functionality in comparison to something like a console
        app. They are also easy to shut down gracefully when the
        job is complete.
        <MudText Style="margin-top: 10px" Typo="Typo.h6">prerequisites</MudText>
        <MudList Dense="true">
            <MudListItem>You already have docker installed and know the basics</MudListItem>
            <MudListItem>You have a Kubernetes cluster to test on and know how to use kubernetes/kubectl. If not I recommend
                <MudLink Href="https://minikube.sigs.k8s.io/docs/start/" Target="_blank">minikube</MudLink>
            </MudListItem>
        </MudList>
        <MudText Style="margin-top: 10px" Typo="Typo.h4">Creating our Job</MudText>
        <hr style="width: 60%">
        As I said above we will be using a worker service to run jobs. So navigate to where you want to create your
        project and open a terminal and run
        <CodeBlock CodeAsString="@newProject"></CodeBlock>
        The first thing we should do is delete the worker that comes automatically when you create a worker service. So
        delete the Worker.cs file and remove the line
        <i style="background-color: #ffffffff;">services.AddHostedService&lt;Worker&gt;();</i> from program.cs <br>
        <br>
        Now let's create our job. Create a file called SampleJob.cs and make it look like so
        <CodeBlock CodeAsString="@sampleJob"></CodeBlock>
        The code for this job is pretty simple. It inherits from BackgroundService which means we can add it as a
        HostedService later.
        It has two injected services, ILogger and IHostApplicationLifetime. We will use IHostApplicationLifetime to
        gracefully shut down the application when
        the job is complete. <br>
        The ExecuteAsync method is the entry point for the job. It will log the value of an integer and increment it.
        When the integer is equal to 10 it will
        shut the application down. In the StopAsync method we log Exiting application. The StopAsync method gets called
        whenever the
        application shuts down. <br>
        Now we need to add our job/BackgroundService to program.cs. <br>
        Do so by adding the line <i
            style="background-color: #ffffffff;">services.AddHostedService&lt;SampleJob&gt;();</i>. Startup.cs
        should look like so.
        <CodeBlock CodeAsString="@program"></CodeBlock>
        And with that our Job is complete. Run it to see if works.
        <MudText Style="margin-top: 10px" Typo="Typo.h4">Dockerizing our images</MudText>
        <hr style="width: 60%">
        I'm not going to go into detail about docker. I am just going to give you the basic steps to put your code in a
        image and
        upload it to a container registry. <br>
        Here is what my docker file looks like.
        <CodeBlock CodeAsString="@dockerFile"></CodeBlock>
        To build your image use <CodeBlock CodeAsString="docker build -t {What you want to name your image}">
        </CodeBlock>
        Once your image is built it needs to be pushed to a container registry. I am using <MudLink Target="_blank"
            Href="https://hub.docker.com/">
            Docker Hub</MudLink>, but any will do.
        <CodeBlock CodeAsString="docker push {your image}"></CodeBlock>
        Depending on what container registry you are using you might need to tag your image, like I had to do this
        <CodeBlock CodeAsString="docker tag {image name} {my docker hub user name}/{image name}"></CodeBlock>
        Now that we have an image and we have uploaded it we can now create a Kubernetes Cron Job.
        <MudText Style="margin-top: 10px" Typo="Typo.h4">Creating Kubernetes CronJobs</MudText>
        <hr style="width: 60%">
        To create Kubernetes CronJob we need to make a CronJob manifest file. So create a file called cronjob.yml and
        fill it with
        <CodeBlock CodeAsString="@yaml"></CodeBlock>
        There are a few things to dissect here. <br>
        <i style="background-color: #ffffffff;"> kind: CronJob</i>, tells kubernetes that we indeed want to create a
        cron job. <br>
        <i style="background-color: #ffffffff;"> schedule: "*/1 * * * *"</i>, this is how we set when to run the job. You
        use a Cron expression to do so.
        In our case the job will run every minute. <br>
        The rest is pretty standard for any kubernetes deployment where you specify the containers to use. Remember to
        replace {Your image}
        with the image you uploaded. <br>
        To create the cronjob do
        <CodeBlock CodeAsString="kubectl create -f .\cronjob.yml"></CodeBlock>
        Remember I am assuming you already have kubectl installed and have a kubernetes cluster to use. <br>
        After a while we should have some pods running. To check use
        <CodeBlock CodeAsString="kubectl get pods"></CodeBlock>
        If all worked we should get
        <CodeBlock CodeAsString="@pods"></CodeBlock>
        By default KubernetesCronJobs only keeps the last three pods running so you don't have to worry about it keeping
        old containers
        alive.<br>
        We can get the logs of one of the pods with
        <CodeBlock CodeAsString="kubectl logs samplejob-27502426-7vx7s"></CodeBlock>
        You should see a few logs but look out for <i style="background-color: #ffffffff;">Worker running count {number
            between 1 and 10}</i>
        that way we know our code is working. Also look for <i style="background-color: #ffffffff;">Application is shutting
            down...</i> that way we know
        our application is shutting  down. <br>
        <MudText Style="margin-top: 10px" Typo="Typo.h4">Conclusion</MudText>
        <hr style="width: 60%">
        This might seem like quite a lot to schedule a job, which it might be. The idea is that each job will be in its
        own worker service with its own cronjob.yaml. That is definitely a lot but it does mean that you can edit/add/delete jobs
        easily and not worry about how it will affect other jobs. 
    </MudText>
</MudPaper>

@code {
    string newProject = @"dotnet new worker -n ""KubernetesCronJobSampleProject""";

    string sampleJob = @"namespace KubernetesCronJobSampleProject;
public class SampleJob : BackgroundService
{
    private readonly ILogger<SampleJob> _logger;
    private readonly IHostApplicationLifetime _hostApplicationLifetime;
    private int _count = 0;

    public SampleJob(ILogger<SampleJob> logger,IHostApplicationLifetime hostApplicationLifetime)
    {
        _logger = logger;
        _hostApplicationLifetime = hostApplicationLifetime;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        while (!stoppingToken.IsCancellationRequested)
        {
            _logger.LogInformation($""Worker running count {_count}"");
            await Task.Delay(1000, stoppingToken);
            _count++;

            if(_count >= 10)
            {
                _hostApplicationLifetime.StopApplication();
            }
        }
    }

    public override Task StopAsync(CancellationToken stoppingToken)
    {
        _logger.LogDebug(""Exiting application..."");
        return base.StopAsync(stoppingToken);
    }
}";
    string program = @"using KubernetesCronJobSampleProject;

IHost host = Host.CreateDefaultBuilder(args)
.ConfigureServices(services =>
{
    services.AddHostedService<SampleJob>();
})
.Build();

await host.RunAsync();";

    string dockerFile = @"FROM mcr.microsoft.com/dotnet/aspnet:6.0-focal AS base

FROM mcr.microsoft.com/dotnet/sdk:6.0-focal AS build
WORKDIR /src
COPY [""KubernetesCronJobSampleProject.csproj"", ""./""]
RUN dotnet restore ""KubernetesCronJobSampleProject.csproj""
COPY . .
WORKDIR ""/src/.""
RUN dotnet build ""KubernetesCronJobSampleProject.csproj"" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish ""KubernetesCronJobSampleProject.csproj"" -c Release -o /app/publish


FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT [""dotnet"", ""KubernetesCronJobSampleProject.dll""]";

    string yaml = @"apiVersion: batch/v1
kind: CronJob
metadata:
name: samplejob
spec:
schedule: ""*/1 * * * *""
jobTemplate:
spec:
template:
spec:
containers:
- name: samplejob
image:{Your image}
imagePullPolicy: IfNotPresent
restartPolicy: OnFailure";

    string pods =
    @"NAME READY STATUS RESTARTS AGE
samplejob-27502424-6bfpq 0/1 Completed 0 2m29s
samplejob-27502425-rrs2j 0/1 Completed 0 89s
samplejob-27502426-7vx7s 0/1 Completed 0 29s";
}